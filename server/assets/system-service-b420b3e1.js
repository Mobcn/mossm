var m=Object.defineProperty;var y=(r,t,e)=>t in r?m(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var c=(r,t,e)=>(y(r,typeof t!="symbol"?t+"":t,e),e);import{a as w}from"./index-9e861b44.js";const E=(r,t)=>{const e=r.__vccOpts||r;for(const[s,n]of t)e[s]=n;return e};class h{constructor(t){c(this,"defaultOptions",{headers:{"Content-Type":"application/json"}});c(this,"requestInterceptors",[]);c(this,"responseInterceptors",[]);c(this,"responseErrorInterceptor",null);Object.assign(this.defaultOptions,t)}static create(t){return new h(t)}async get(t,e,s){return e&&(t=this.mergeURL(t,e)),this._request(t,void 0,{...s,method:"GET"})}async post(t,e,s){return this._request(t,e,{...s,method:"POST"})}async put(t,e,s){return this._request(t,e,{...s,method:"PUT"})}async delete(t,e,s){return e&&(t=this.mergeURL(t,e)),this._request(t,void 0,{...s,method:"DELETE"})}addRequestInterceptor(t){this.requestInterceptors.push(t)}addResponseInterceptor(t){this.responseInterceptors.push(t)}setResponseErrorInterceptor(t){this.responseErrorInterceptor=t}async _request(t,e,s){const n={...this.defaultOptions,body:e,...s};if(await this.runRequestInterceptors(t,n),typeof e=="object"?(n.headers=new Headers(n.headers),e instanceof FormData?n.headers.delete("Content-Type"):Object.keys(e).length>0&&((n.headers.get("Content-Type")??"").startsWith("application/x-www-form-urlencoded")?n.body=this.mergeURL("/",e).split("?")[1]:n.body=JSON.stringify(e))):e&&(n.body=e),n.timeout!==void 0){const p=new AbortController;n.signal&&(n.signal.onabort=g=>p.abort(g)),n.signal=p.signal,setTimeout(()=>p.abort("timeout"),n.timeout)}const o=await fetch(new URL(t,n.baseURL),n);if(o.status!==200){if(!this.responseErrorInterceptor)throw new Error(o.statusText);return await this.responseErrorInterceptor(o,n)}let i;const u=o.headers.get("Content-Type")??"";u.startsWith("application/json")?i=await o.json():u.startsWith("application/octet-stream")?i=await o.blob():i=await o.text();const l={...o,data:i};return await this.runResponseInterceptors(l),l.data}async runRequestInterceptors(t,e){for await(const s of this.requestInterceptors)await s(t,e)}async runResponseInterceptors(t){for await(const e of this.responseInterceptors){const s=await e(t);s&&(t.data=s)}}mergeURL(t,e){const s=new URL(t,"http://localhost");for(const[n,o]of Object.entries(e))o instanceof Array?o.forEach(i=>s.searchParams.append(n,String(i))):s.searchParams.append(n,String(o));return t.startsWith("http")?s.href:s.href.replace("http://localhost","")}}const d="/mossm/login",a=h.create({baseURL:"http://localhost:5173"});a.addRequestInterceptor((r,t)=>{const e=w.get("token");e&&(t.headers=new Headers(t.headers),t.headers.set("Authorization","Bearer "+e))});a.addResponseInterceptor(r=>{const{code:t,message:e,data:s}=r.data;if(t!==0)throw new Error(e);return s});a.setResponseErrorInterceptor(async(r,t)=>{if(r.status!==401)throw new Error(r.statusText);const{pathname:e}=new URL(r.url);if(e===d)throw new Error(r.statusText);let{token:s}=await a.post(d);return w.set("token",s),await a[t.method.toLowerCase()](r.url,void 0,t)});const f={login:"/mossm/login",chsetting:"/mossm/chsetting"},T={login:async(r,t)=>a.post(f.login,{username:r,password:t}),chsetting:async r=>a.post(f.chsetting,r)};export{E as _,T as a,a as s};
